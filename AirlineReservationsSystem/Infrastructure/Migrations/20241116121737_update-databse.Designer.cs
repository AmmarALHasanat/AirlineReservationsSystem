// <auto-generated />
using System;
using AirlineReservationsSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirlineReservationsSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241116121737_update-databse")]
    partial class updatedatabse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Airplane", b =>
                {
                    b.Property<int>("AirplaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirplaneId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AirplaneId");

                    b.ToTable("Airplanes");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TravelRouteId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("TravelRouteId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.FlightSeat", b =>
                {
                    b.Property<int>("FlightSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightSeatId"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<float>("SeatPrice")
                        .HasColumnType("real");

                    b.HasKey("FlightSeatId");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatId");

                    b.ToTable("FlightSeats");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("AirplaneId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.TravelRoute", b =>
                {
                    b.Property<int>("TravelRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelRouteId"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("EstimatedTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("TravelRouteId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            TravelRouteId = 1,
                            Destination = "AQJ",
                            EstimatedTime = "4h 0m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 2,
                            Destination = "AMM",
                            EstimatedTime = "4h 0m",
                            Origin = "AQJ"
                        },
                        new
                        {
                            TravelRouteId = 3,
                            Destination = "AUH",
                            EstimatedTime = "3h 15m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 4,
                            Destination = "AMM",
                            EstimatedTime = "3h 15m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 5,
                            Destination = "DXB",
                            EstimatedTime = "3h 30m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 6,
                            Destination = "AMM",
                            EstimatedTime = "3h 30m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 7,
                            Destination = "SHJ",
                            EstimatedTime = "3h 40m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 8,
                            Destination = "AMM",
                            EstimatedTime = "3h 40m",
                            Origin = "SHJ"
                        },
                        new
                        {
                            TravelRouteId = 9,
                            Destination = "RKT",
                            EstimatedTime = "1h 30m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 10,
                            Destination = "AMM",
                            EstimatedTime = "1h 30m",
                            Origin = "RKT"
                        },
                        new
                        {
                            TravelRouteId = 11,
                            Destination = "AAN",
                            EstimatedTime = "2h 0m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 12,
                            Destination = "AMM",
                            EstimatedTime = "2h 0m",
                            Origin = "AAN"
                        },
                        new
                        {
                            TravelRouteId = 13,
                            Destination = "RUH",
                            EstimatedTime = "3h 10m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 14,
                            Destination = "AMM",
                            EstimatedTime = "3h 10m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 15,
                            Destination = "JED",
                            EstimatedTime = "2h 50m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 16,
                            Destination = "AMM",
                            EstimatedTime = "2h 50m",
                            Origin = "JED"
                        },
                        new
                        {
                            TravelRouteId = 17,
                            Destination = "DMM",
                            EstimatedTime = "3h 5m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 18,
                            Destination = "AMM",
                            EstimatedTime = "3h 5m",
                            Origin = "DMM"
                        },
                        new
                        {
                            TravelRouteId = 19,
                            Destination = "AHB",
                            EstimatedTime = "3h 20m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 20,
                            Destination = "AMM",
                            EstimatedTime = "3h 20m",
                            Origin = "AHB"
                        },
                        new
                        {
                            TravelRouteId = 21,
                            Destination = "CAI",
                            EstimatedTime = "1h 45m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 22,
                            Destination = "AMM",
                            EstimatedTime = "1h 45m",
                            Origin = "CAI"
                        },
                        new
                        {
                            TravelRouteId = 23,
                            Destination = "SSH",
                            EstimatedTime = "3h 10m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 24,
                            Destination = "AMM",
                            EstimatedTime = "3h 10m",
                            Origin = "SSH"
                        },
                        new
                        {
                            TravelRouteId = 25,
                            Destination = "IST",
                            EstimatedTime = "2h 45m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 26,
                            Destination = "AMM",
                            EstimatedTime = "2h 45m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 27,
                            Destination = "ESB",
                            EstimatedTime = "4h 10m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 28,
                            Destination = "AMM",
                            EstimatedTime = "4h 10m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 29,
                            Destination = "TZX",
                            EstimatedTime = "2h 55m",
                            Origin = "AMM"
                        },
                        new
                        {
                            TravelRouteId = 30,
                            Destination = "AMM",
                            EstimatedTime = "2h 55m",
                            Origin = "TZX"
                        },
                        new
                        {
                            TravelRouteId = 31,
                            Destination = "RUH",
                            EstimatedTime = "2h 45m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 32,
                            Destination = "AUH",
                            EstimatedTime = "2h 45m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 33,
                            Destination = "JED",
                            EstimatedTime = "2h 20m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 34,
                            Destination = "AUH",
                            EstimatedTime = "2h 20m",
                            Origin = "JED"
                        },
                        new
                        {
                            TravelRouteId = 35,
                            Destination = "DMM",
                            EstimatedTime = "2h 30m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 36,
                            Destination = "AUH",
                            EstimatedTime = "2h 30m",
                            Origin = "DMM"
                        },
                        new
                        {
                            TravelRouteId = 37,
                            Destination = "AHB",
                            EstimatedTime = "2h 50m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 38,
                            Destination = "AUH",
                            EstimatedTime = "2h 50m",
                            Origin = "AHB"
                        },
                        new
                        {
                            TravelRouteId = 39,
                            Destination = "CAI",
                            EstimatedTime = "3h 10m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 40,
                            Destination = "AUH",
                            EstimatedTime = "3h 10m",
                            Origin = "CAI"
                        },
                        new
                        {
                            TravelRouteId = 41,
                            Destination = "SSH",
                            EstimatedTime = "3h 0m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 42,
                            Destination = "AUH",
                            EstimatedTime = "3h 0m",
                            Origin = "SSH"
                        },
                        new
                        {
                            TravelRouteId = 43,
                            Destination = "IST",
                            EstimatedTime = "3h 30m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 44,
                            Destination = "AUH",
                            EstimatedTime = "3h 30m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 45,
                            Destination = "ESB",
                            EstimatedTime = "4h 0m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 46,
                            Destination = "AUH",
                            EstimatedTime = "4h 0m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 47,
                            Destination = "TZX",
                            EstimatedTime = "3h 40m",
                            Origin = "AUH"
                        },
                        new
                        {
                            TravelRouteId = 48,
                            Destination = "AUH",
                            EstimatedTime = "3h 40m",
                            Origin = "TZX"
                        },
                        new
                        {
                            TravelRouteId = 49,
                            Destination = "RUH",
                            EstimatedTime = "2h 55m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 50,
                            Destination = "DXB",
                            EstimatedTime = "2h 55m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 51,
                            Destination = "JED",
                            EstimatedTime = "2h 25m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 52,
                            Destination = "DXB",
                            EstimatedTime = "2h 25m",
                            Origin = "JED"
                        },
                        new
                        {
                            TravelRouteId = 53,
                            Destination = "DMM",
                            EstimatedTime = "2h 35m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 54,
                            Destination = "DXB",
                            EstimatedTime = "2h 35m",
                            Origin = "DMM"
                        },
                        new
                        {
                            TravelRouteId = 55,
                            Destination = "AHB",
                            EstimatedTime = "3h 10m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 56,
                            Destination = "DXB",
                            EstimatedTime = "3h 10m",
                            Origin = "AHB"
                        },
                        new
                        {
                            TravelRouteId = 57,
                            Destination = "CAI",
                            EstimatedTime = "3h 0m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 58,
                            Destination = "DXB",
                            EstimatedTime = "3h 0m",
                            Origin = "CAI"
                        },
                        new
                        {
                            TravelRouteId = 59,
                            Destination = "SSH",
                            EstimatedTime = "3h 15m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 60,
                            Destination = "DXB",
                            EstimatedTime = "3h 15m",
                            Origin = "SSH"
                        },
                        new
                        {
                            TravelRouteId = 61,
                            Destination = "IST",
                            EstimatedTime = "3h 10m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 62,
                            Destination = "DXB",
                            EstimatedTime = "3h 10m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 63,
                            Destination = "ESB",
                            EstimatedTime = "4h 0m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 64,
                            Destination = "DXB",
                            EstimatedTime = "4h 0m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 65,
                            Destination = "TZX",
                            EstimatedTime = "3h 25m",
                            Origin = "DXB"
                        },
                        new
                        {
                            TravelRouteId = 66,
                            Destination = "DXB",
                            EstimatedTime = "3h 25m",
                            Origin = "TZX"
                        },
                        new
                        {
                            TravelRouteId = 67,
                            Destination = "CAI",
                            EstimatedTime = "3h 0m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 68,
                            Destination = "RUH",
                            EstimatedTime = "3h 0m",
                            Origin = "CAI"
                        },
                        new
                        {
                            TravelRouteId = 69,
                            Destination = "SSH",
                            EstimatedTime = "3h 30m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 70,
                            Destination = "RUH",
                            EstimatedTime = "3h 30m",
                            Origin = "SSH"
                        },
                        new
                        {
                            TravelRouteId = 71,
                            Destination = "IST",
                            EstimatedTime = "3h 0m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 72,
                            Destination = "RUH",
                            EstimatedTime = "3h 0m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 73,
                            Destination = "ESB",
                            EstimatedTime = "3h 15m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 74,
                            Destination = "RUH",
                            EstimatedTime = "3h 15m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 75,
                            Destination = "TZX",
                            EstimatedTime = "3h 10m",
                            Origin = "RUH"
                        },
                        new
                        {
                            TravelRouteId = 76,
                            Destination = "RUH",
                            EstimatedTime = "3h 10m",
                            Origin = "TZX"
                        },
                        new
                        {
                            TravelRouteId = 77,
                            Destination = "ESB",
                            EstimatedTime = "1h 40m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 78,
                            Destination = "IST",
                            EstimatedTime = "1h 40m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 79,
                            Destination = "TZX",
                            EstimatedTime = "1h 30m",
                            Origin = "IST"
                        },
                        new
                        {
                            TravelRouteId = 80,
                            Destination = "IST",
                            EstimatedTime = "1h 30m",
                            Origin = "TZX"
                        },
                        new
                        {
                            TravelRouteId = 81,
                            Destination = "TZX",
                            EstimatedTime = "1h 20m",
                            Origin = "ESB"
                        },
                        new
                        {
                            TravelRouteId = 82,
                            Destination = "ESB",
                            EstimatedTime = "1h 20m",
                            Origin = "TZX"
                        });
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Flight", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Airplane", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.TravelRoute", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("TravelRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.FlightSeat", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Booking", null)
                        .WithMany("FlightSeats")
                        .HasForeignKey("BookingId");

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Flight", "Flight")
                        .WithMany("FlightSeats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Seat", "Seat")
                        .WithMany("FlightSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Notification", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Seat", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Airplane", "Airplane")
                        .WithMany("Seats")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airplane");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirlineReservationsSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Airplane", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Booking", b =>
                {
                    b.Navigation("FlightSeats");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Flight", b =>
                {
                    b.Navigation("FlightSeats");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.Seat", b =>
                {
                    b.Navigation("FlightSeats");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.TravelRoute", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AirlineReservationsSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Payments");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
